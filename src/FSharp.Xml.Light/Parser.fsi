// Signature file for parser generated by fsyacc
module Parser
type token = 
  | END
  | OPEN
  | CLOSE
  | STAR
  | QUESTION
  | PLUS
  | PCDATA
  | IDENT of (string)
  | NEXT
  | OR
type tokenId = 
    | TOKEN_END
    | TOKEN_OPEN
    | TOKEN_CLOSE
    | TOKEN_STAR
    | TOKEN_QUESTION
    | TOKEN_PLUS
    | TOKEN_PCDATA
    | TOKEN_IDENT
    | TOKEN_NEXT
    | TOKEN_OR
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startdtd_element
    | NONTERM_dtd_element
    | NONTERM_dtd_full_seq
    | NONTERM_dtd_seq
    | NONTERM_dtd_children
    | NONTERM_dtd_choice
    | NONTERM_dtd_item
    | NONTERM_dtd_member
    | NONTERM_dtd_op
    | NONTERM_dtd_op_item
/// This function maps tokens to integer indexes
val tagOfToken: token -> int

/// This function maps integer indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val dtd_element : (FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> FSharp.Text.Lexing.LexBuffer<'cty> -> (Dtd.dtd_child) 
